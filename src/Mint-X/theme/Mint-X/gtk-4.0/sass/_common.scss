@function gtkalpha($c,$a) {
  @return unquote("alpha(#{$c},#{$a})");
}

$asset_suffix: if($variant=='dark', '-dark', '');
$button_radius: 3px;
$menu_radius: 5px;
$window_radius: $button_radius + 3;
$popover_radius: $button_radius + 3;

/***************
 * Base States *
 ***************/
.background {
  color: $fg_color;
  background-color: $bg_color;
}

dnd {
  color: $fg_color;
}

.normal-icons {
  -gtk-icon-size: 16px;
}

.large-icons {
  -gtk-icon-size: 32px;
}

image:disabled {
  -gtk-icon-filter: opacity(0.5);
}

.view,
%view {
  color: $text_color;
  background-color: $base_color;

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  &:selected {
    &:focus, & {
      @extend %selected_items;

      border-radius: 3px;
    }
  }
}

textview {
  > text {
    @extend %view;

    > selection { &:focus, & { @extend %selected_items; }}
  }

  &:drop(active) {
    caret-color: $drop_target_color;
  }
}

textview > border { background-color: mix($bg_color, $base_color, 50%); }

iconview {
  @extend .view;

  &:drop(active) {
    box-shadow: none;
  }

  > dndtarget:drop(active) {
    border-style: solid;
    border-width: 1px;
    border-color: $selected_borders_color;
  }
}

rubberband {
  border: 1px solid $selected_bg_color;
  background-color: transparentize($selected_bg_color, 0.7);
}

flowbox {
  > rubberband { @extend rubberband; }

  > flowboxchild {
    padding: 3px;

    &:selected {
      @extend %selected_items;
    }
  }
}

gridview {
  > rubberband { @extend rubberband; }

  > child {
    padding: 3px;

    &:selected { @extend %selected_items; }
  }

  box { //cells
    border-spacing: 8px; //label separation
    margin: 12px;
  }
}

coverflow cover {
  color: $text_color;
  background-color: $base_color;
  border: 1px solid black;
}

label {
  &.separator {
    @extend .dim-label;
  }

  &:selected { @extend %nobg_selected_items; }

  > selection {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }

  &:disabled {
    color: $insensitive_fg_color;

    button & { color: inherit; }

    > selection { @extend %selected_items_disabled; }
  }

  &.error {
    color: $error_color;
    &:disabled { color: transparentize($error_color,0.5); }
  }
}

.dim-label {
  opacity: 0.55;
  text-shadow: none;
}

window.assistant {
  .sidebar {
    background-color: $base_color;
    border-top: 1px solid $borders_color;
  }

  &.csd .sidebar { border-top-style: none; }

  .sidebar > label { padding: 6px 12px; }

  .sidebar > label.highlight {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }
}

window.aboutdialog image.large-icons {
  -gtk-icon-size: 128px;
}

%osd,
.osd {
  color: $osd_fg_color;
  border: none;
  background-color: $osd_bg_color;
  background-clip: padding-box;
  text-shadow: 0 1px black;
  -gtk-icon-shadow: 0 1px black;
}


/*********************
 * Spinner Animation *
 *********************/
@keyframes spin {
  to { transform: rotate(1turn); }
}

spinner {
  background: none;
  opacity: 0; // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled { opacity: 0.5; }
  }
}

/**********************
 * General Typography *
 **********************/

.large-title {
   font-weight: 300;
   font-size: 24pt;
}
.title-1 {
   font-weight: 800;
   font-size: 20pt;
}
.title-2 {
   font-weight: 800;
   font-size: 15pt;
}
.title-3 {
   font-weight: 700;
   font-size: 15pt;
}
.title-4 {
   font-weight: 700;
   font-size: 13pt;
}
.heading {
   font-weight: 700;
   font-size: 11pt;
}
.body {
   font-weight: 400;
   font-size: 11pt;
}
.caption-heading {
   font-weight: 700;
   font-size: 9pt;
}
.caption {
   font-weight: 400;
   font-size: 9pt;
}

/****************
 * Text Entries *
 ****************/

%entry,
entry {
  %entry_basic, & {
    min-height: 28px;
    padding-left: 4px;
    padding-right: 4px;
    border: 1px solid;
    border-radius: $button_radius;

    @include entry(normal);

    > image { // icons inside the entry
      &.left { margin-right: 6px; }
      &.right { margin-left: 6px; }
    }

    > text > placeholder {
      @extend .dim-label;
    }

    &.flat {
      &:focus-within, &:backdrop, &:disabled, &:backdrop:disabled, & {
        min-height: 0;
        padding: 2px;
        background-color: transparent;
        border-color: transparent;
        border-radius: 0;
      }
    }

    &:disabled { @include entry(insensitive); }

    > text > selection { @extend %selected_items; }

    // entry error and warning style
    @each $e_type, $e_color in (error, $error_color),
                               (warning, $warning_color) {
      &.#{$e_type} {
        color: $e_color;
        border-color: entry_focus_border($e_color);

        &:focus-within { @include entry(focus, $e_color); }

        > selection { background-color: $e_color; }
      }
    }

    > image { // entry icons colors
      color: mix($fg_color, $base_color, 80%);

      &:hover { color: $fg_color; }

      &:active { color: $selected_bg_color; }
    }

    &.password image.caps-lock-indicator {
      color: mix($fg_color, $base_color, 80%);
    }

    &:drop(active) {
      &:focus-within, & {
        border-color: $drop_target_color;
        box-shadow: inset 0 0 0 1px $drop_target_color;
      }
    }

    .osd & {
      @include entry(osd);

      &:focus-within { @include entry(osd-focus); }

      &:disabled { @include entry(osd-insensitive); }
    }
  }

  > progress {
    margin: 2px -6px;
  }

  progress > trough > progress {
    background-color: transparent;
    background-image: none;
    border-radius: 0;
    border-width: 0 0 2px;
    border-color: $selected_bg_color;
    border-style: solid;
    box-shadow: none;
  }

   // linked entries
  .linked:not(.vertical) > & { @extend %linked; }

  .linked:not(.vertical) > &:drop(active) + &,
  .linked:not(.vertical) > &:drop(active) + button,
  .linked:not(.vertical) > &:drop(active) + menubutton > button,
  .linked:not(.vertical) > &:drop(active) + dropdown > button,
  .linked:not(.vertical) > &:drop(active) + colorbutton > button,
  .linked:not(.vertical) > &:drop(active) + fontbutton > button,
  .linked:not(.vertical) > &:drop(active) + filechooserbutton > button,
  .linked:not(.vertical) > &:drop(active) + filechooserbutton > combobox > box > button.combo,
  .linked:not(.vertical) > &:drop(active) + appchooserbutton > combobox > box > button.combo,
  .linked:not(.vertical) > &:drop(active) + combobox > box > button.combo { border-left-color: $drop_target_color; }

  // Vertically linked entries
  // FIXME: take care of "colored" entries
  .linked.vertical > & {
    @extend %linked_vertical;

    // brighter border between linked entries
    &:not(:disabled) + entry:not(:disabled),
    &:not(:disabled) + %entry:not(:disabled) {
      border-top-color: mix($borders_color, $base_color, 30%);
    }

    // brighter border between linked insensitive entries
    &:disabled + %entry:disabled,
    &:disabled + entry:disabled { border-top-color: mix($borders_color, $base_color, 30%); }

    + %entry:drop(active):not(:only-child),
    + entry:drop(active):not(:only-child) { border-top-color: $drop_target_color; }

    &:drop(active):not(:only-child) {
      + %entry,
      + entry,
      + button,
      + menubutton > button,
      + dropdown > button,
      + colorbutton > button,
      + fontbutton > button,
      + filechooserbutton > button,
      + filechooserbutton > combobox > box > button.combo,
      + appchooserbutton > combobox > box > button.combo,
      + combobox > box > button.combo { border-top-color: $drop_target_color; }
    }
  }

  &.error { color: $error_color; }
}

treeview entry {
  &:focus-within {
    &:dir(rtl), &:dir(ltr) { // specificity bump hack
      background-color: $base_color;
    }
  }

  &.flat, & {
    border-radius: 0;
    background-image: none;
    background-color: $base_color;

    &:focus-within { border-color: $selected_bg_color; }
  }
}

/*******************
 * Editable Labels *
 *******************/
editablelabel > stack > text {
  @include entry(normal);

  > selection {
    @extend %selected_items;
  }
}

/***********
 * Buttons *
 ***********/
// stuff for .needs-attention
$_dot_color: if($variant=='light', $selected_bg_color,
                                   lighten($selected_bg_color,15%));
@keyframes needs_attention {
  from { background-image: radial-gradient(farthest-side, $_dot_color 0%, transparentize($_dot_color, 1) 0%); }
  to { background-image: radial-gradient(farthest-side, $_dot_color 95%, transparentize($_dot_color, 1)); }
}

%button,
button {
  @at-root %button_basic, & {

    min-height: 18px;
    min-width: 14px;
    padding: 4px 7px;
    border: 1px solid;
    border-radius: $button_radius;

    @include button(normal);

    &:hover {
      @include button(hover);
      -gtk-icon-filter: brightness(1.2);
    }

    &.keyboard-activating,
    &:active,
    &:checked {
      @include button(active);
    }

    &:checked:hover {}
    &:checked:active {}

    &:disabled {
      @include button(insensitive);
      -gtk-icon-filter: opacity(0.5);

      &:active,
      &:checked { @include button(insensitive-active); }
    }

    @at-root %button_basic_flat,
    &.flat {
      @include button(undecorated);

      &:hover { @include button(hover); }

      &.keyboard-activating,
      &:active,
      &:checked {
        @include button(active);
      }

      &:disabled { @include button(undecorated); }
    }

    &.image-button {
      min-width: 18px;
      padding: 4px;
    }

    &.text-button {
      padding: 4px 16px;
    }

    &.text-button.image-button {
      padding: 4px 7px;
    }

    &.text-button.image-button {
      padding: 4px 7px;

      label {
        padding-left: 8px;
        padding-right: 8px;
      }
    }

    &.arrow-button {
      padding-left: 10px;
      padding-right: 10px;

      > box {
        border-spacing: 4px;
      }
    }

    @at-root %button_basic_drop_active,
    &:drop(active) {
      color: $drop_target_color;
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 1px $drop_target_color;
    }
  }

  @at-root %button_selected, & {
    row:selected & {
      @if $variant == 'light' { border-color: $selected_borders_color; }
    }

    @at-root %button_selected_flat, &.flat {
      row:selected & {
        &:not(:active):not(:checked):not(:hover):not(disabled) {
          color: $selected_fg_color;
          border-color: transparent;
        }
      }
    }
  }

  // big standalone buttons like in Documents pager
  &.osd {
    min-width: 26px;
    min-height: 32px;

    &.image-button { min-width: 34px; }

    color: $osd_fg_color;
    border-radius: 5px;

    @include button(osd);

    border: none;
    box-shadow: none;

    &:hover {
      @include button(osd-hover);

      border: none;
      box-shadow: none;
    }

    &:active,
    &:checked {
      @include button(osd-active);

      border: none;
      box-shadow: none;
    }

    &:disabled {
      @include button(osd-insensitive);

      border: none;
    }
  }

  //overlay / OSD style
  @at-root %osd_button,
  .osd & {
    @include button(osd);

    &:hover { @include button(osd-hover); }

    &:active,
    &:checked { @include button(osd-active); }

    &:disabled { @include button(osd-insensitive); }

    &.flat {
      @include button(undecorated);

      box-shadow: none;
      text-shadow: 0 1px black;
      -gtk-icon-shadow: 0 1px black;

      &:hover { @include button(osd-hover); }

      &:disabled {
        @include button(osd-insensitive);
        background-image: none;
        border-color: transparent;
        box-shadow: none;
      }

      &:active,
      &:checked { @include button(osd-active); }
    }
  }

  // Suggested and Destructive Action buttons
  @each $b_type, $b_color in (suggested-action, $suggested_bg_color),
                             (destructive-action, $destructive_color) {
    &.#{$b_type} {
      @include button(normal-colored, $b_color, white);

      &.flat {
        @include button(undecorated);

        color: $b_color; //FIXME: does it work on the dark variant?
      }

      &:hover { @include button(normal-colored, darken($b_color, 5%), white); }

      &:active,
      &:checked { @include button(active, $b_color, white); }

      &.flat {
        &:disabled {
          @include button(undecorated);

          color: transparentize($b_color, 0.2);
        }
      }

      &:disabled {
        @include button(insensitive);

        &:active,
        &:checked { @include button(insensitive-active, $b_color, white); }
      }

      .osd & {
        @include button(osd, $b_color);

        &:hover { @include button(osd-hover, $b_color); }

        &:active,
        &:checked { &:backdrop, & { @include button(osd-active, $b_color); }}

        &:disabled { &:backdrop, & { @include button(osd-insensitive, $b_color); }}
      }
    }
  }

  .stack-switcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    > label {
      padding: 0 6px;
      margin: 0 -6px;
    }

    > image {
      padding: 3px 6px;
      margin: -3px -6px;
    }

    &.needs-attention {
      > label,
      > image { @extend %needs_attention; }
    }
  }

  // hide separators
  &.font {
    separator {
      background-color: transparent;
      border: none;
    }
    > box { border-spacing: 6px; }
    > box > box > label { font-weight: bold; }
  }

  .linked:not(.vertical) > & { @extend %linked; }

  .linked.vertical > & { @extend %linked_vertical; }

  menubutton.circular &,
  &.circular { // force circular button shape
    min-width: 32px;
    min-height: 32px;
    padding: 0;
    border-radius: 9999px;

    label { padding: 0; }
  }
}

%needs_attention {
  // the dot is drawn by using two radial gradient, the first one is the actual dot, the other
  // simulates the shadow labels and icons normally have in buttons.
  animation: needs_attention 150ms ease-in;

  background-image: radial-gradient(farthest-side, $_dot_color 96%, transparentize($_dot_color,1 ));
  background-size: 6px 6px, 6px 6px;
  background-repeat: no-repeat;

  @if $variant == 'light' { background-position: right 3px, right 4px; }

  @else { background-position: right 3px, right 2px; }

  &:backdrop { background-size: 6px 6px, 0 0;}

  &:dir(rtl) {
    @if $variant == 'light' { background-position: left 3px, left 4px; }

    @else { background-position: left 3px, left 2px; }
  }
}

%linked_not_left {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

%linked_not_right {
  border-right-style: none;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

// 1st/last child are at text start/end
%linked {
  &:dir(ltr) {
    &:not(:first-child) { @extend %linked_not_left; }
    &:not(:last-child) { @extend %linked_not_right; }
  }

  &:dir(rtl) {
    &:not(:first-child) { @extend %linked_not_right; }
    &:not(:last-child) { @extend %linked_not_left; }
  }
}

%linked_not_top {
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}

%linked_not_bottom {
  border-bottom-style: none;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}

%linked_vertical {
  &:not(:first-child) { @extend %linked_not_top; }

  &:not(:last-child) { @extend %linked_not_bottom; }
}

%undecorated_button {
  background-color: transparent;
  background-image: none;
  border-color: transparent;
  box-shadow: inset 0 1px transparentize(white, 1),
              0 1px transparentize(white, 1);
  text-shadow: none;
  -gtk-icon-shadow: none;
}

.linked:not(.vertical) > menubutton,
.linked:not(.vertical) > dropdown,
.linked:not(.vertical) > colorbutton,
.linked:not(.vertical) > fontbutton,
.linked:not(.vertical) > filechooserbutton {
  &:dir(ltr) {
    &:not(:first-child) > button { @extend %linked_not_left; }
    &:not(:last-child) > button { @extend %linked_not_right; }
  }

  &:dir(rtl) {
    &:not(:first-child) > button { @extend %linked_not_right; }
    &:not(:last-child) > button { @extend %linked_not_left; }
  }
}

.linked.vertical > menubutton,
.linked.vertical > dropdown,
.linked.vertical > colorbutton,
.linked.vertical > fontbutton,
.linked.vertical > filechooserbutton {
  &:not(:first-child) > button { @extend %linked_not_top; }
  &:not(:last-child) > button { @extend %linked_not_bottom; }
}

/* menu buttons */
modelbutton.flat {
  min-height: 24px;
  padding-left: 8px;
  padding-right: 8px;
  border-radius: $button_radius;

  @extend %undecorated_button;

  &:hover {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }

  &:disabled { color: $insensitive_fg_color; }

  &:selected { @extend %selected_items; }
}

modelbutton.flat arrow {
  background: none;
  min-width: 16px;
  min-height: 16px;
  opacity: 0.3; //dim icon

  &:hover { background: none; }

  &.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); }

  &.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); }
}

/* oldstyle toolbar buttons */

.toolbar > button,
.toolbar > :not(.linked) > button,
.toolbar :not(.linked) > menubutton > button,
.toolbar :not(.linked) > scalebutton > button,
.toolbar :not(.linked) > dropdown > button,
.toolbar :not(.linked) > colorbutton > button,
.toolbar :not(.linked) > fontbutton > button,
.toolbar :not(.linked) > appchooserbutton > button,
.toolbar :not(.linked) > combobox > box > button {
  margin: 1px;

   @extend %button_basic_flat;
}

button.color {
  padding: 4px;

  > colorswatch:only-child {
    &, > overlay { border-radius: 0; }

    @if $variant == 'light' {
      box-shadow: 0 1px _text_shadow_color();

      .osd & { box-shadow: none; }
    }
  }

  @if $variant == 'light' {
    .osd &, & {
      &:disabled,
      &:active,
      &:checked { colorswatch:only-child { box-shadow: none; }}
    }
  }
}

/* list buttons */
/* tone down as per new designs, see issue #1473, #1748 */
%list_button,
list > row button.image-button:not(.flat) {
  @extend %undecorated_button;
  border: 1px solid transparentize($borders_color, .5);
  &:hover { @include button(hover); }
  &:active,
  &:checked { @include button(active); }
}

/*********
 * Links *
 *********/

%link,
link {
  color: $link_color;
  text-decoration: underline;

  &:visited {
    color: $link_visited_color;

    *:selected & { color: mix($selected_fg_color, $link_visited_color, 60%); }
  }

  &:hover {
    $_fg: lighten($link_color, 10%);
    color: $_fg;

    *:selected & { color: mix($selected_fg_color, $_fg, 90%); }
  }

  &:active {
    color: $link_color;

    *:selected & { color: mix($selected_fg_color, $link_color, 80%); }
  }

  &:disabled { color: transparentize(desaturate($link_color, 100%), 0.2); }


  @at-root %link_selected,
  &:selected,
  *:selected & { color: mix($selected_fg_color, $link_color, 80%); }
}

button.link {
  @extend %link;

  text-shadow: none;

  &:hover,
  &:active,
  &:checked {
    @extend %undecorated_button;

    text-shadow: none;
  }

  > label {
    text-decoration: underline;

  }
}


/*****************
 * GtkSpinButton *
 *****************/
spinbutton {
  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    @extend %entry;

    padding: 0;
    border-spacing: 0;

    %spinbutton_horz_entry {
      min-width: 28px;
      // reset all the other props since the spinbutton node is styled here
      margin: 0;
      background: none;
      background-color: transparent;
      border: none;
      border-radius: 0;
      box-shadow: none;
      padding: 6px;
    }

    > text {
      @extend %spinbutton_horz_entry;
    }

    /* :not here just to bump specificity above that of the list button styling */
    > button.image-button.up:not(.flat),
    > button.image-button.down:not(.flat) {
      min-height: 16px;
      margin: 0;
      padding-bottom: 0;
      padding-top: 0;
      border-width: 0;
      border-color: transparentize($borders_color, 0.7);
      border-radius: 0;
      @if $variant == 'light' {
        box-shadow: inset 0 1px transparentize(white, 1.0),
                    inset 2px 0 transparentize(white, 0.5),
                    inset 1px 0 transparentize(black, 0.6),
                    inset -1px 0 transparentize(white, 0.5),
                    inset 0 -1px transparentize(black, 0.96);
      }
      @else {
        box-shadow: inset 0 1px transparentize(white, 0.9),
                    inset 2px 0 transparentize(white, 0.95),
                    inset 1px 0 transparentize(black, 0.6);
      }

      &:disabled {
        background-color: transparent;
        @if $variant == 'light' {
          box-shadow: inset 1px 0 transparentize(black, 0.8),
                      inset -1px 0 transparentize(white, 0.8),
                      inset 0 1px transparentize(white, 0.7);
        }
        @else {
          box-shadow: inset 0 1px transparentize(white, 0.9),
                      inset 2px 0 transparentize(white, 0.95),
                      inset 1px 0 transparentize(black, 0.6);
        }
      }

      &:active {
        box-shadow: inset 0 2px transparentize(black, 0.95),
                    inset 1px 0 transparentize(black, 0.7),
                    inset 0 -1px transparentize(black, 0.96);
      }

      &:dir(ltr):last-child { border-radius: 0 $button_radius $button_radius 0; }

      &:dir(rtl):first-child { border-radius: $button_radius 0 0 $button_radius; }
    }
  }

  // OSD horizontal
  .osd &:not(.vertical) {
    > text {
      @extend %spinbutton_horz_entry;
    }

    > button.image-button.up:not(.flat),
    > button.image-button.down:not(.flat) {
      @include button(undecorated);

      color: $osd_fg_color;
      border-style: none none none solid;
      border-color: transparentize($osd_borders_color, 0.3);
      border-radius: 0;
      box-shadow: none;
      -gtk-icon-shadow: 0 1px black;

      &:dir(rtl) { border-style: none solid none none; }

      &:hover {
        @include button(undecorated);

        color: $osd_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        background-color: transparentize($osd_fg_color, 0.9);
        -gtk-icon-shadow: 0 1px black;
        box-shadow: none;
      }

      &:disabled {
        @include button(undecorated);

        color: $osd_insensitive_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        -gtk-icon-shadow: none;
        box-shadow: none;
      }

      &:dir(ltr):last-child { border-radius: 0 $button_radius $button_radius 0; }

      &:dir(rtl):first-child { border-radius: $button_radius 0 0 $button_radius; }
    }
  }

  // Vertical
  &.vertical {
    // in the vertical configuration, we treat the spinbutton
    // as a box, and tweak the style of the entry in the middle
    // so that it's linked

    // FIXME: this should not be set at all, but otherwise it gets the wrong
    // color
    &:disabled { color: $insensitive_fg_color; }

    &:drop(active) {
      border-color: transparent;
      box-shadow: none;
    }

    > text {
      @extend %entry;

      min-height: 32px;
      min-width: 32px;
      padding: 0;
      border-radius: 0;
    }

    button {
      min-height: 32px;
      min-width: 32px;
      padding: 0;

      &.up { @extend %top_button; }

      &.down { @extend %bottom_button; }
    }

    %top_button {
      border-bottom-style: none;
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }

    %bottom_button {
      border-top-style: none;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
  }

  // OSD vertical
  .osd &.vertical > button:first-child {
    @include button(osd);

    &:hover { @include button(osd-hover);}

    &:active { @include button(osd-active); }

    &:disabled { @include button(osd-insensitive); }
  }

  // Misc
  treeview &:not(.vertical) {
    min-height: 0;
    border-style: none;
    border-radius: 0;

    > text {
      min-height: 0;
      padding: 1px 2px;
    }
  }

  font-feature-settings: "tnum";
}


/**************
 * ComboBoxes *
 **************/
dropdown > popover.menu.background > contents { padding: 0; } //allow search entries with no margin

dropdown > button > box {
  border-spacing: 6px;

  > stack > row.activatable:hover {
    background: none;
    box-shadow: none;
  }
}

dropdown,
combobox {
  arrow {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    min-height: 16px;
    min-width: 16px;
  }

  > popover.background.menu > contents {
    padding: 4px 0;
    border-radius: 0;
  }

  > popover.menu > contents modelbutton {
    min-height: 16px;
    padding: 5px 6px;
    border-radius: 0;
  }

  &.linked {
    button:nth-child(2) {
      &:dir(ltr) { @extend %linked_not_left; }
      &:dir(rtl) { @extend %linked_not_right; }
    }
  }

  &:drop(active) { // FIXME: untested
    box-shadow: none;

    button.combo { @extend %button_basic_drop_active; }
  }

  popover {
    padding: 0;

    listview {

      margin: 4px 0;

      > row.activatable {
         padding: 5px 6px;

        &:selected {
         &, &:hover {
            color: $selected_fg_color;
            background-color: $selected_bg_color;
            box-shadow: none;
          }
        }
      }
    }

    // drodowns with searchboxes on top
    .dropdown-searchbar {
      padding: 6px;
      border-bottom: 1px solid $borders_color;
    }
  }
}

// the combo is a composite widget so the way we do button linking doesn't
// work, special case needed. See
// https://bugzilla.gnome.org/show_bug.cgi?id=733979

.linked:not(.vertical) > filechooserbutton > combobox,
.linked:not(.vertical) > appchooserbutton > combobox,
.linked:not(.vertical) > combobox {
  &:dir(ltr) {
    &:not(:first-child) > box > button.combo { @extend %linked_not_left; }
    &:not(:last-child) > box > button.combo { @extend %linked_not_right; }
  }

  &:dir(rtl) {
    &:not(:first-child) > box > button.combo { @extend %linked_not_right; }
    &:not(:last-child) > box > button.combo { @extend %linked_not_left; }
  }
}

.linked.vertical > filechooserbutton > combobox,
.linked.vertical > appchooserbutton > combobox,
.linked.vertical > combobox {
  &:not(:first-child) > box > button.combo { @extend %linked_not_top; }
  &:not(:last-child) > box > button.combo { @extend %linked_not_bottom; }
}

/************
 * Toolbars *
 ************/
%toolbar {
  padding: 6px;
  border-spacing:  1px;
  background-color: $bg_color;
}

.toolbar {
  @extend %toolbar;

  padding: 4px 3px 3px 4px;

  // on OSD
  .osd & { background-color: transparent; }

  // stand-alone OSD toolbars
  &.osd {
    padding: 13px;
    border: none;
    border-radius: 5px;
    background-color: $osd_bg_color;

    &.left,
    &.right,
    &.top,
    &.bottom { border-radius: 0; } // positional classes for `attached` osd toolbars
  }

  &.horizontal > separator,
  &.vertical > separator {
    border-color: transparent;
    border-left-color: if($variant == 'light', transparentize(black, 0.8), transparentize(black, 0.75));
    border-right-color: if($variant == 'light', transparentize(white, 0.7), transparentize(white, 0.96));
  }
}

//searchbar & location-bar
searchbar > revealer > box {
  @extend %toolbar;

  @extend %darkbar;

  border-width: 0 0 1px;
  padding: 3px;
}

%darkbar {
  border-style: solid;
  border-color: $borders_color;
  $_bg: mix($bg_color, $borders_color, 70%);
  background-color: $_bg;
}

/**************
 * GtkInfoBar *
 **************/
infobar {
  border-style: none;
  padding: 8px;
  border-spacing: 12px;

  &.info {
    background-color: $info_color;

    button {
      @include button(normal-colored, $info_color, $fg_color, none);

      &.flat:hover,
      &:hover { @include button(normal-colored, lighten($info_color, 3%), $fg_color, none); }

      &.flat:active,
      &:active,
      &:checked { @include button(active, $info_color, $fg_color, none); }

      &.flat { @include button(undecorated); }
    }
  }

  &.question {
    background-color: $question_color;

    button {
      @include button(normal-colored, $question_color, $fg_color, none);

      &.flat:hover,
      &:hover { @include button(normal-colored, lighten($question_color, 3%), $fg_color, none); }

      &.flat:active,
      &:active,
      &:checked { @include button(active, $question_color, $fg_color, none); }

      &.flat { @include button(undecorated); }
    }
  }

  &.warning {
    background-color: $warning_color;
    color: $selected_fg_color;

    button {
      @include button(normal-colored, $warning_color, $selected_fg_color, none);

      &.flat:hover,
      &:hover { @include button(normal-colored, lighten($warning_color, 3%), $selected_fg_color, none); }

      &.flat:active,
      &:active,
      &:checked { @include button(active, $warning_color, $selected_fg_color, none); }

      &.flat { @include button(undecorated); }
    }
  }

  &.error {
    background-color: $error_color;
    color: $selected_fg_color;

    button {
      @include button(normal-colored, $error_color, $selected_fg_color, none);

      &.flat:hover,
      &:hover { @include button(normal-colored, lighten($error_color, 3%), $selected_fg_color, none); }

      &.flat:active,
      &:active,
      &:checked { @include button(active, $error_color, $selected_fg_color, none); }

      &.flat { @include button(undecorated); }
    }
  }

  //close button for info and searchbar (#3215)

  infobar .close,
  searchbar .close {
    @include button(undecorated);
    min-width: 16px;
    min-height: 16px;
    padding: 4px;
    border-radius: 50%;

    &:hover { @include button(hover); }
  }
}


/*****************
 * Title buttons *
 *****************/

windowcontrols {

  &:not(.empty) {
    &.start:dir(ltr),
    &.end:dir(rtl) {
      margin-right: 7px;
    }

    &.start:dir(rtl),
    &.end:dir(ltr) {
      margin-left: 7px;
    }
  }

  button {
    background-color: transparent;
    background-image: none;
    background-position: center;
    background-repeat: no-repeat;
    border-width: 0;
    box-shadow: none;
    text-shadow: none;

    &.close, &.maximize, &.minimize {
      &, &:hover, &:active, &:checked {

        padding: 8px 3px 8px 3px;
        margin: 0 2px;
        min-height: 0;
        min-width: 0;
        background-image: none;
        background-color: transparent;
        // background-size: 16px 16px;
        // background-position: center;
        // background-repeat: no-repeat;
        border: none;
        box-shadow: none;
        color: if($variant == 'light', darken($bg_color, 30%), lighten($bg_color, 30%));
        -gtk-icon-shadow: if($variant == 'light', 0 1px white, 0 -1px black);

        &:hover { color: if($variant == 'light', darken($bg_color, 40%), lighten($bg_color, 40%)); }
        &:backdrop {
          color: if($variant == 'light', darken($bg_color, 20%), lighten($bg_color, 20%));
          -gtk-icon-shadow: none;
        }
      }
    }
  }
}

/***************
 * Header bars *
 ***************/
%titlebar,
headerbar {
  padding: 0 7px;
  min-height: 42px;
  border-width: 0 0 1px;
  border-style: solid;
  border-color: $borders_color;
  border-radius: 0;

  @include headerbar_fill($bg_color);

  &:backdrop {
    border-color: $backdrop_borders_color;
    background-color: $bg_color;
    background-image: none;
    color: $backdrop_fg_color;
  }

  .title {
    padding-left: 12px;
    padding-right: 12px;
    font-weight: bold;
  }

  .subtitle {
    font-size: smaller;
    padding-left: 12px;
    padding-right: 12px;

    @extend .dim-label;
  }

  button:not(.titlebutton):backdrop { color: $backdrop_fg_color; }

  // squared corners when the window is maximized, tiled, or fullscreen
  .tiled &,
  .tiled-top &,
  .tiled-right &,
  .tiled-bottom &,
  .tiled-left &,
  .maximized &,
  .fullscreen & {
    &:backdrop, & {
      border-radius: 0;
    }
  }

  &.default-decoration {
    min-height: 28px;
    padding: 0 6px;
    border-bottom-width: 0;
    background-image: if($variant == 'light', linear-gradient(to bottom, lighten($bg_color, 8%), $bg_color),
                                              linear-gradient(to bottom, lighten($bg_color, 3%), $bg_color));

    &:backdrop {
      background-image: none;
      background-color: $bg_color;
    }

    windowcontrols {
      button,
      menubutton {
        min-height: 0;
        min-width: 22px;
        margin: 0;
        padding: 0;
      }

      menubutton button {
        min-height: 20px;
        min-width: 20px;
        margin: 0;
        padding: 4px;
      }
    }
  }

  separator.titlebutton { opacity: 0; } /* hide the close button separator */

  .solid-csd & {
    &:backdrop, & {
      &:dir(rtl), &:dir(ltr) { // specificity bump
        margin-left: -1px;
        margin-right: -1px;
        margin-top: -1px;
        border-radius: 0;
        box-shadow: none;
      }
    }
  }
}

headerbar {
  > windowhandle > box {
    &,
    > box.start,
    > box.end {
      border-spacing: 6px;
    }
  }

  // add vertical margins to common widget on the headerbar to avoid them spanning the whole height
  entry,
  spinbutton,
  separator:not(.sidebar),
  button {
    margin-top: 6px;
    margin-bottom: 6px;
  }

  // Reset margins for buttons inside menubutton
  menubutton > button {
    margin-top: 0px;
    margin-bottom: 0px;
  }

  switch {
    margin-top: 10px;
    margin-bottom: 10px;
  }
}

.background .titlebar {
  &:backdrop, & {
    border-top-left-radius: $window_radius;
    border-top-right-radius: $window_radius;
  }
}

.titlebar:not(headerbar) {
  window.csd > & {
    // in csd we assume every titlebar is a headerbar so reset anything, this is needed for split toolbars cases
    padding: 0;
    background-color: transparent;
    background-image: none;
    border-style: none;
    border-color: transparent;
  }

  separator { background-color: $borders_color; }  // FIXME: use darker border?

  @extend %titlebar;
}

// Development versions of apps to use a differently styled headerbar

window.devel {
  headerbar.titlebar {
    $c: darken($bg_color, 10%);
    $gradient: cross-fade(10% -gtk-icontheme("system-run-symbolic"), image(transparent)) 90% 0/256px 256px no-repeat,
               linear-gradient(to right, transparent 65%, transparentize($selected_bg_color, 0.8)),
               linear-gradient(to top, darken($c, 3%), $c 3px, lighten($c, 6%));
    @if $variant == 'dark' {
      $gradient: cross-fade(10% -gtk-icontheme("system-run-symbolic"), image(transparent)) 90% 0/256px 256px no-repeat,
                 linear-gradient(to right, transparent 65%, transparentize($selected_bg_color, 0.9)),
                 linear-gradient(to top, lighten($c, 3%) 3px, lighten($c, 5%));
    }

    background: $bg_color $gradient;

    &:backdrop {
      background: $bg_color cross-fade(10% -gtk-icontheme("system-run-symbolic"), image(transparent)) 90% 0/256px 256px no-repeat,
                  image($bg_color); /* background-color would flash */
    }
  }
}

/************
 * Pathbars *
 ************/

.path-bar > button {
  &.text-button, &.image-button, & {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.text-button.image-button label {
    padding-left: 0;
    padding-right: 0;
  }

  &.text-button.image-button, & {
    label:last-child { padding-right: 8px; }
    label:first-child { padding-left: 8px; }
  }

  image {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.slider-button {
    padding-left: 0;
    padding-right: 0;
  }
}


/**************
 * Tree Views *
 **************/

columnview.view,
treeview.view {
  border-left-color: mix($fg_color, $base_color, 50%); // this is actually the tree lines color,
  border-top-color: $bg_color;                         // while this is the grid lines color, better then nothing
  padding: 1px;

  > rubberband { @extend rubberband; } // to avoid borders being overridden by the previously set props

  &:selected {
    &:focus, & {
      border-style: solid;
      border-width: 1px 0 1px 0;
      border-radius: 0;
      border-color: darken($borders_color, 10%);
      background-color: transparent;
      background-image: linear-gradient(to bottom, $selected_bg_color, darken($selected_bg_color, 15%));
      color: $selected_fg_color;

      // @extend %selected_items;
    }
  }

  &:disabled {
    color: $insensitive_fg_color;

    &:selected {
      color: mix($selected_fg_color, $selected_bg_color, 40%);
    }
  }

  &.separator {
    min-height: 2px;
    color: $borders_color;
  }

  &:drop(active) {
    box-shadow: none;
  }

  > dndtarget:drop(active) {
    border-style: solid none;
    border-width: 1px;
    border-color: $selected_bg_color;

    &.after { border-top-style: none; }

    &.before { border-bottom-style: none; }
  }

  &.expander {
    // GtkTreeView uses the larger of the expander’s min-width and min-height
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    color: mix($text_color, $base_color, 70%);

    &:hover { color: $text_color; }

    &:selected {
      color: mix($selected_fg_color, $selected_bg_color, 70%);

      &:hover { color: $selected_fg_color; }
    }

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
  }

  &.progressbar, &.progressbar:selected { // progress bar in treeviews
    color: $selected_fg_color;
    border: none;
    border-radius: 2px;
    background-image: linear-gradient(to bottom, lighten($selected_bg_color, 15%), darken($selected_bg_color, 5%));
  }

  &.trough, &.trough:selected { // progress bar trough in treeviews
    color: $fg_color;
    border: 1px solid $borders_color;
    border-radius: 3px;
    background-image: linear-gradient(to bottom, darken($bg_color, 5%), lighten($bg_color, 15%));
  }

  > header {
    > button {
      @extend %column_header_button;

      color: $fg_color;
      text-shadow: none;

      sort-indicator {
        &.ascending {
          -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
        }
        &.descending {
          -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
        }

        min-height: 16px;
        min-width: 16px;
      }
    }
  }

  button.dnd,
  header.button.dnd { // for treeview-like derive widgets
    &:active, &:selected, &:hover, & {
      padding: 0 6px;
      color: $base_color;
      background-image: none;
      background-color: $selected_bg_color;
      border-style: none;
      border-radius: 0;
      box-shadow: inset 0 0 0 1px $base_color;
      text-shadow: none;
      transition: none;
    }
  }

  acceleditor > label { background-color: $selected_bg_color; } // see tests/testaccel to test
}

%column_header_button {
  padding: 4px 6px;
  background-image: linear-gradient(to bottom, $base_color, darken($base_color, 4%) 50%, $bg_color);
  border-style: none solid solid none;
  border-color: $borders_color;
  border-radius: 0;
  text-shadow: none;

  &:disabled {
    border-color: $bg_color;
    background-image: none;
  }

  &:last-child { border-right-style: none; }
}

/***************
 * Popovers   *
 ***************/

popover.background {
  background-color: transparent;
  font: initial; // Decouple the font of popovers from their entry/textview

  > arrow,
  > contents {
    background-color: $menu_color;
    background-clip: border-box;
    border: 1px solid $borders_color;
    box-shadow: 0 2px 6px 1px if($variant!='dark', transparentize(black, 0.93), transparentize(black, 0.65));
  }

  > contents {
    padding: 8px;
    border-radius: 3px;

    > list,
    > .view,
    > .toolbar {
      border-style: none;
      background-color: transparent;
    }

    separator {
      border: 1px solid transparent;
      border-top-color: if($variant == 'light', transparentize(black, 0.92), transparentize(black, 0.75));
      border-bottom-color: if($variant == 'light', transparentize(white, 0.65), transparentize(white, 0.96));
      margin: 2px 0;
    }

    list separator { margin: 2px 0; }
  }

  .osd &,
  &.touch-selection,
  &.magnifier {
    background-color: transparent;

    > arrow,
    > contents {
      @extend %osd;

      border: 1px solid transparentize(white, 0.9);
      box-shadow: none;
    }
  }

  &.touch-selection,
  &.magnifier {
    button { @extend %osd_button; }
  }
}

magnifier {
  background-color: $base_color;
}

/**********************
 * Popover Base Menus *
 **********************/

$_menu-padding: 12px; //inner menuitem padding

popover.menu {
  padding: 0;

  box.inline-buttons {
    padding: 0 $_menu-padding;

    button.image-button.model {
      @include button(normal);

      &, &:dir(ltr) { margin-left: 6px; }
      &:dir(rtl) { margin-right: 6px; }

      &:focus { @include button(hover); }
      &:active { @include button(active); }
    }
  }

  box.circular-button {
    padding: $_menu-padding $_menu-padding 6px;

    button.circular.image-button.model {
      @extend %list_button;

      padding: 11px;
      &:focus { @include button(hover); }
      &:active { @include button(active); }
    }
  }

  accelerator {
    color: gtkalpha(currentColor,0.55);

    &:dir(ltr) { margin-left: $_menu-padding; }
    &:dir(rtl) { margin-right: $_menu-padding; }
  }

  arrow.left,
  radio.left,
  check.left {
    margin-left: -1px;
    margin-right: 7px;
  }

  arrow.right,
  radio.right,
  check.right {
    margin-left: 7px;
    margin-right: -1px;
  }

  scale {
    padding: 5px $_menu-padding;
  }

  modelbutton {
    min-height: 16px;
    min-width: 40px;
    padding: 5px $_menu-padding;
    border-radius: 2px;
  }

  label.title {
    font-weight: bold;
    padding: 4px ($_menu-padding + 20px); //this will fall apart with font sizing
  }
}

/*********
 * Menus *
 *********/
menubar {
  border: none;
  background-color: $bg_color;

  > item {
    padding: 4px 6px;
    border: 1px solid transparent;

    &:selected { //Seems like it :hover even with keyboard focus
      border-color: $borders_color;
      border-radius: 3px 3px 0 0;
      background-color: transparent;
      background-image: linear-gradient(to bottom, $selected_bg_color, darken($selected_bg_color, 15%));
      color: $selected_fg_color;
    }

    &:disabled {
      color: $insensitive_fg_color;
      box-shadow: none;
    }
  }

  & > item popover.menu modelbutton {
    border-radius: 0;
  }

  & > item popover.menu.background > contents {
    padding: 4px 0;
    border-radius: 2px;
  }

  //nested submenus
  & > item popover.menu popover.menu {
    margin-top: -5px;
  }
}

/*************
 * Notebooks *
 *************/
notebook {
  padding: 0;

  &.frame {
    border: 1px solid $borders_color;

    > header {
      margin: -1px;

      &.top {
        margin-bottom: 0;
        padding-left: 0;
        padding-right: 0;

        > tabs {
          margin: 0;
          margin-right: -2px;
        }
      }
    }
  }

  > header {
    padding: 0;
    background-color: $bg_color;

    &.top {
      padding-bottom: 0;
      box-shadow: inset 0 -1px $borders_color;
      > tabs {
        > tab {
          padding: 2px 10px;
          min-width: 20px;
          min-height: 20px;
          margin-right: 2px;
          border: 1px solid $borders_color;
          border-radius: 4px 4px 0 0;
          background-color: transparent;
          background-image: linear-gradient(to bottom, lighten($bg_color, 5%), darken($bg_color, 2%));

          &:checked {
            border-bottom: transparent;
            background-image: none;
            background-color: $base_color;
          }

          &:dir(rtl) {
            margin-right: 0;
            margin-left: 2px;
          }
        }
      }
    }

    &.bottom {
      padding-top: 0;
      box-shadow: inset 0 1px $borders_color;
      > tabs {
        > tab {
          padding: 2px 10px;
          min-width: 20px;
          min-height: 20px;
          margin-right: 2px;
          border: 1px solid $borders_color;
          border-radius: 0 0 4px 4px;
          background-color: transparent;
          background-image: linear-gradient(to top, lighten($bg_color, 5%), darken($bg_color, 2%));

          &:checked {
            border-top: transparent;
            background-image: none;
            background-color: $base_color;
          }

          &:dir(rtl) {
            margin-right: 0;
            margin-left: 2px;
          }
        }
      }
    }

    &.left {
      padding-right: 0;
      box-shadow: inset -1px 0 $borders_color;
      > tabs {
        > tab {
          padding: 2px 10px;
          min-width: 20px;
          min-height: 20px;
          margin-bottom: 2px;
          border: 1px solid $borders_color;
          border-radius: 4px 0 0 4px;
          background-color: transparent;
          background-image: linear-gradient(to bottom, lighten($bg_color, 5%), darken($bg_color, 2%));

          &:checked {
            border-right: transparent;
            background-image: none;
            background-color: $base_color;
          }
        }
      }
    }

    &.right {
      padding-left: 0;
      box-shadow: inset 1px 0 $borders_color;
      > tabs {
        > tab {
          padding: 2px 10px;
          min-width: 20px;
          min-height: 20px;
          margin-bottom: 2px;
          border: 1px solid $borders_color;
          border-radius: 0 4px 4px 0;
          background-color: transparent;
          background-image: linear-gradient(to bottom, lighten($bg_color, 5%), darken($bg_color, 2%));

          &:checked {
            border-left: transparent;
            background-image: none;
            background-color: $base_color;
          }
        }
      }
    }

    &.top > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-top-style: none;
    }

    &.bottom > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-bottom-style: none;
    }

    @at-root %notebook_vert_arrows {
      margin-left: -5px;
      margin-right: -5px;
      padding-left: 4px;
      padding-right: 4px;

      &.down { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }
    }

    &.left > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-left-style: none;
    }

    &.right > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-right-style: none;
    }

    @at-root %notebook_horz_arrows {
      margin-top: -5px;
      margin-bottom: -5px;
      padding-top: 4px;
      padding-bottom: 4px;

      &.down { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    }

    > tabs > arrow {
      @extend %button_basic;

      @extend %button_basic_flat;

      min-height: 16px;
      min-width: 16px;
      border-radius: 0;

      &:hover:not(:active):not(:backdrop) {
        background-clip: padding-box;
        background-image: none;
        background-color: transparentize(white, 0.7);
        border-color: transparent;
        box-shadow: none;
      }

      &:disabled { @include button(undecorated); }
    }

    tab {
      button.flat {
        color: darken($fg_color, 15%);
        padding: 0;
        min-width: 20px;
        min-height: 20px;

        &:last-child {
          margin-left: 4px;
          margin-right: -4px;
        }

        &:first-child {
          margin-left: -4px;
          margin-right: 4px;
        }
      }
    }
  }

  > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
    background-color: $base_color;
  }

  paned.horizontal > & > header > tabs {
    margin-right: -2px;

    :dir(rtl) {
      margin-left: -2px;
      padding-right: 2px;
    }
  }
}


/**************
 * Scrollbars *
 **************/
scrollbar {
  $_slider_min_length: 40px;
  $_slider_width: 10px;
  $_fine-tune_slider_border: $_slider_width - 3; //3672

  background-color: transparent;
  border-style: solid;
  border-color: transparentize($borders_color, 0.5);

  &.vertical {
    border-width: 0 0 0 1px;
    background-image: linear-gradient(to right, $bg_color, $base_color);
  }

  &.horizontal {
    border-width: 1px 0 0 0;
    background-image: linear-gradient(to bottom, $bg_color, $base_color);
  }

  // scrollbar border
  &.top { border-bottom: 1px solid transparentize($borders_color, 0.5); }
  &.bottom { border-top: 1px solid transparentize($borders_color, 0.5); }
  &.left { border-right: 1px solid transparentize($borders_color, 0.5); }
  &.right { border-left: 1px solid transparentize($borders_color, 0.5); }

  // slider
  slider {
    min-width: $_slider_width;
    min-height: $_slider_width;
    margin: -1px;
    margin-top: 2px;
    margin-bottom: 2px;
    border: 1px solid $borders_color;
    border-radius: 8px;
    background-clip: padding-box;
    background-color: transparent;
    background-image: linear-gradient(to right, lighten($bg_color, 12%), darken($bg_color, 5%));
  }

  &.horizontal slider {
    margin: -1px;
    margin-left: 2px;
    margin-right: 2px;
    background-image: linear-gradient(to bottom, lighten($bg_color, 12%), darken($bg_color, 5%));
  }

  &.fine-tune {
    slider {
      min-width: 4px;
      min-height: 4px;
    }

    &.vertical slider {
      margin-left: 3px;
      margin-right: 3px;
    }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) {
      border-color: transparent;
      opacity: 0.4;
      background-color: transparent;
      background-image: none;

      slider {
        margin: 0;
        min-width: 4px;
        min-height: 4px;
        background-color: darken($bg_color, 40%);
        background-image: none;
      }

      &.horizontal {
        slider {
          margin: 0 2px;
          min-width: $_slider_min_length;
        }
      }

      &.vertical {
        slider {
          margin: 2px 0;
          min-height: $_slider_min_length;
        }
      }
    }

    &.dragging,
    &.hovering { opacity: 0.8; }
  }

  &.horizontal slider { min-width: $_slider_min_length; }

  &.vertical slider { min-height: $_slider_min_length; }
}

treeview ~ scrollbar.vertical {
  border-top: 1px solid $borders_color;
  margin-top: -1px;
}

/**********
 * Switch *
 **********/
switch {
  // similar to the .scale
  border: 1px solid $borders_color;
  border-radius: 4px;
  color: $fg_color;
  background-color: if($variant == 'light', darken($bg_color, 15%), darken($bg_color, 8%));

  &:checked {
    color: $selected_fg_color;
    background-color: $selected_bg_color;
    text-shadow: 0 1px transparentize($selected_borders_color, 0.5),
                 0 0 2px transparentize(white, 0.4);
  }

  &:disabled {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $bg_color;
    text-shadow: none;
  }

  > slider {
    margin: -1px;
    min-width: 36px;
    min-height: 24px;
    border: 1px solid;
    border-radius: 4px;

    @if $variant == 'light' {
      @include button(normal);
    }
    @else {
      @include button(normal, $c: lighten($bg_color,6%));
    }
  }

  &:hover > slider {
    @if $variant == 'light' {
      @include button(hover);
    }
    @else {
      @include button(hover, $c: lighten($bg_color,6%));
    }
  }

  &:disabled > slider { @include button(insensitive); }
}


/*************************
 * Check and Radio items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly


//selection-mode
@each $check_state, $check_icon, $check_color, $check_background in
  ('', 'none', 'transparent', $selected_bg_color),
  (':hover', 'none', 'transparent', $selected_bg_color),
  (':active', 'none', 'transparent', $selected_bg_color),
  (':checked', '-gtk-icontheme(\'object-select-symbolic\')', $osd_fg_color, $selected_bg_color),
  (':checked:hover', '-gtk-icontheme(\'object-select-symbolic\')', $osd_fg_color, $selected_bg_color),
  (':checked:active', '-gtk-icontheme(\'object-select-symbolic\')', $osd_fg_color, $selected_bg_color), {

  .view.content-view.check#{$check_state}:not(list),
  .content-view .tile check#{$check_state}:not(list) {
    margin: 4px;
    min-width: 32px;
    min-height: 32px;
    color: #{$check_color};
    background-color: #{$check_background};
    border-radius: 5px;
    background-image: none;
    box-shadow: none;
    border-width: 0;
    -gtk-icon-source: #{$check_icon};
    -gtk-icon-shadow: none;
  }
}

checkbutton {
  border-spacing: 4px;

  &.text-button {
    // this is for a nice focus on check and radios text
    padding: 2px 0;
  }
}

check,
radio {
  min-height: 14px;
  min-width: 14px;
  border: 1px solid;
  -gtk-icon-source: none;

  & {
    // for unchecked
    $_c: if($variant=='light', white, $bg_color);

    @each $state, $t in ("", "normal"),
                        (":hover", "hover"),
                        (":active", "active"),
                        (":disabled", "insensitive") {
      &#{$state} {
        @include check($t, $_c);
      }
    }
  }

  & {
    // for checked
    @each $t in (':checked'), (':indeterminate') {
      &#{$t} {
        @each $state, $t in ("", "normal"),
                            (":hover", "hover"),
                            (":active", "active"),
                            (":disabled", "insensitive") {
          &#{$state} {
            @include check($t, $selected_bg_color, $selected_fg_color, $checked: true);
          }
        }
      }
    }
  }

  @if $variant == 'light' {
    // the borders of the light variant versions of checks and radios are too similar in luminosity to the selected background
    // color, hence we need special casing.
    // row:selected & { border-color: $checkradio_borders_color; }
  }

  .osd & {
    @include button(osd);

    &:hover { @include button(osd); }
    &:active { @include button(osd-active); }
    &:disabled { @include button(osd-insensitive); }
  }
}

%check,
check {
  border-radius: 3px;
  -gtk-icon-size: 14px;

  -gtk-icon-shadow: 0 1px transparentize(black, 0.4),
                    0 -1px transparentize(black, 0.6),
                    1px 0 transparentize(black, 0.6),
                    -1px 0 transparentize(black, 0.7);

  &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/check-symbolic.svg")),
                                      -gtk-recolor(url("assets/check-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/dash-symbolic.symbolic.png"))); }

  &:disabled { -gtk-icon-shadow: none;}

  menu menuitem & {
    &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/menu-check-symbolic.svg")),
                                        -gtk-recolor(url("assets/menu-check-symbolic.symbolic.png"))); }

    &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/menu-dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/menu-dash-symbolic.symbolic.png"))); }
  }
}

%radio,
radio {
  border-radius: 100%;
  -gtk-icon-size: 14px;

  -gtk-icon-shadow: 0 1px transparentize(black, 0.4),
                    0 -1px transparentize(black, 0.6),
                    1px 0 transparentize(black, 0.6),
                    -1px 0 transparentize(black, 0.7);

  &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/bullet-symbolic.svg")),
                                      -gtk-recolor(url("assets/bullet-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/dash-symbolic.symbolic.png"))); }

  &:disabled { -gtk-icon-shadow: none; }

  menu menuitem & {
    &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/menu-bullet-symbolic.svg")),
                                        -gtk-recolor(url("assets/menu-bullet-symbolic.symbolic.png"))); }

    &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/menu-dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/menu-dash-symbolic.symbolic.png"))); }
  }
}

treeview.view radio:selected { &:focus, & { @extend %radio; }} // This is a workaround


/************
 * GtkScale *
 ************/
%scale_trough {
  border: 1px solid $borders_color;
  border-radius: 3px;
  background-color: darken($bg_color, 5%);
  @if $variant == 'light' {
    box-shadow: inset 1px 1px transparentize(black, 0.9),
                      0 1px transparentize(white, 0.5);
  }
  @else {
    box-shadow: inset 1px 1px transparentize(black, 0.9),
                      0 1px transparentize(white, 0.9);
  }

  &:disabled {
    border-color: lighten($borders_color, 10%);
    background-color: darken($bg_color, 2%);
    background-image: none;
    box-shadow: none;
  }

  // ...on selected list rows
  row:selected & { &:disabled, & { border-color: $selected_borders_color; }}

  // OSD
  .osd & {
    border-color: $osd_borders_color;
    background-color: transparentize($osd_borders_color, 0.2);
    box-shadow: 0 1px transparentize(white, 0.9);

    &:disabled { background-color: $osd_insensitive_bg_color; }
  }
}

%scale_highlight {
  border: 1px solid $selected_borders_color;
  border-radius: 3px;
  background-image: linear-gradient(to bottom, lighten($selected_bg_color, 10%), darken($selected_bg_color, 6%));
  box-shadow: 0 1px transparentize(white, 0.95);

  &:disabled {
    border-color: lighten($borders_color, 10%);
    background-color: darken($bg_color, 2%);
    background-image: none;
    box-shadow: none;
  }

  // ...on selected list rows
  row:selected & { &:disabled, & { border-color: $selected_borders_color; }}

  // OSD
  .osd & {
    border-color: $osd_borders_color;

    &:disabled { border-color: transparent; }
  }
}

%scale_vert_highlight {
  @extend %scale_highlight;

  background-image: linear-gradient(to right, lighten($selected_bg_color, 10%), darken($selected_bg_color, 6%));
  box-shadow: 1px 0 transparentize(white, 0.95);

  &:disabled {
    border-color: lighten($borders_color, 10%);
    background-color: darken($bg_color, 2%);
    background-image: none;
    box-shadow: none;
  }
}

scale {
  // sizing
  $_marks_length: 4px;
  $_marks_distance: 4px;

  min-height: 16px;
  min-width: 16px;
  padding: 3px;

  // those are inside the trough node, I need them to show their own border over the trough one, so negative margin
  fill,
  highlight { margin: -1px; }

  // the slider is inside the trough, so to have make it bigger there's a negative margin

  slider {
    min-height: 16px;
    min-width: 16px;
    margin: -7px;
  }

  // click-and-hold the slider to activate
  &.fine-tune {
    // to make the trough grow in fine-tune mode
    slider { margin: -5px; }

    fill,
    highlight,
    trough {
      border-radius: 5px;
    }
  }

  // the backing bit
  trough {
    @extend %scale_trough;
  }

  // the colored part of the backing bit
  highlight { @extend %scale_highlight; }
  &.vertical highlight { @extend %scale_vert_highlight; }

  // this is another differently styled part of the backing bit, the most relevant use case is for example
  // in media player to indicate how much video stream as been cached
  fill {
    @extend %scale_trough;

    &:disabled {
      &:backdrop, & {
        border-color: transparent;
        background-color: transparent;
      }
    }

    // OSD
    .osd & {
      background-color: mix($osd_fg_color, $osd_borders_color, 25%);

      &:disabled {
        &:backdrop, & {
          border-color: transparent;
          background-color: transparent;
        }
      }
    }
  }

  slider {
    @include button(normal);

    border: 1px solid $borders_color;
    border-radius: 100%;

    &:hover { @include button(hover); }

    &:active { border-color: $selected_borders_color; }

    &:disabled { @include button(insensitive); }

    // ...on selected list rows
    row:selected & { &:disabled, & { border-color: $selected_borders_color; } }

    // OSD
    .osd & {
      @include button(osd);
      border-color: darken($osd_borders_color, 3%);
      background-color: opacify($osd_bg_color, 1); // solid background needed here

      &:hover {
        @include button(osd-hover);
        background-color: opacify($osd_bg_color, 1); // solid background needed here
      }

      &:active {
        @include button(osd-active);
        background-color: opacify($osd_bg_color, 1); // solid background needed here
      }

      &:disabled {
        @include button(osd-insensitive);
        background-color: opacify($osd_bg_color, 1); // solid background needed here
      }
    }
  }

  marks,
  value {
    color: gtkalpha(currentColor, 0.8);
    font-feature-settings: "tnum";
  }

  value { margin-bottom: 5px; }

  //marks margins
  @each $scale_orient, $marks_class, $marks_pos, $marks_margin in (horizontal, top, top, bottom),
                                                                  (horizontal, bottom, bottom, top),
                                                                  (vertical, top, left, right),
                                                                  (vertical, bottom, right, left) {
    &.#{$scale_orient} marks {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance);
      }
    }
  }

  &.horizontal {
    indicator {
      min-height: $_marks_length + 1;
      min-width: 1px;
    }
  }

  &.vertical {
    indicator {
      min-height: 1px;
      min-width: $_marks_length + 1;
    }
  }
}


/*****************
 * Progress bars *
 *****************/
progressbar {
  // sizing
  &.horizontal {
    > trough {
      min-width: 150px;
      &, > progress { min-height: 5px; }
    }
  }

  &.vertical {
    > trough {
      min-height: 80px;
      &, > progress { min-width: 5px; }
    }
  }

  &.horizontal > trough >progress { margin: 0 -1px; } // the progress node is positioned after the trough border
  &.vertical > trough > progress { margin: -1px 0; }   // this moves it over it.


  // FIXME: insensitive state missing and some other state should be set probably
  font-size: smaller;
  color: $fg_color;
  font-feature-settings: "tnum";

  > trough {
    @extend %scale_trough;

    box-shadow: none;
    @if $variant == 'light' {
      background-image: linear-gradient(to bottom, darken($bg_color, 5%), lighten($bg_color, 15%));
    }
    @else {
      background-image: linear-gradient(to bottom, $bg_color, lighten($bg_color, 15%));
    }
  }

  &.vertical > trough {
    @extend %scale_trough;

    box-shadow: none;
    @if $variant == 'light' {
      background-image: linear-gradient(to right, darken($bg_color, 5%), lighten($bg_color, 15%));
    }
    @else {
      background-image: linear-gradient(to right, $bg_color, lighten($bg_color, 15%));
    }
  }

  > trough > progress {
    @extend %scale_highlight;

    border-radius: 1.5px;

    &.left {
      border-top-left-radius: 3px;
      border-bottom-left-radius: 3px;
    }

    &.right {
      border-top-right-radius: 3px;
      border-bottom-right-radius: 3px;
    }
  }

  &.vertical > trough > progress {
    @extend %scale_vert_highlight;

    border-radius: 1.5px;

    &.top {
      border-top-right-radius: 2px;
      border-top-left-radius: 2px;
    }

    &.bottom {
      border-bottom-right-radius: 2px;
      border-bottom-left-radius: 2px;
    }
  }

  &.osd { // progressbar.osd used for epiphany page loading progress
    min-width: 3px;
    min-height: 3px;
    background-color: transparent;

    > trough {
      border-style: none;
      border-radius: 0;
      background-color: transparent;
      box-shadow: none;
    }

    > progress {
      border-style: none;
      border-radius: 0;
    }
  }

  > trough.empty > progress { all: unset; } // makes the progress indicator disappear, when the fraction is 0
}


/*************
 * Level Bar *
 *************/
levelbar {
  &.horizontal {
    trough > block {
      min-height: 3px;
    }

    &.discrete {
      trough > block {
        margin: 0 1px;
        min-width: 32px;
      }
    }
  }

  &.vertical {
    trough > block {
      min-width: 3px;
    }

    &.discrete > trough > block {
      margin: 1px 0;
      min-height: 32px;
    }
  }

  > trough {
    border: 1px solid;
    padding: 2px;
    border-radius: 3px;
    @include entry(normal);
  }

  > trough > block {
    border: 1px solid;
    border-radius: 2px;

    &.low {
      border-color: if($variant == 'light', darken($warning_color, 20%), $warning_color);
      background-color: $warning_color;
    }

    &.high,
    &:not(.empty) {
      border-color: $selected_bg_color;
      background-color: $selected_bg_color;
    }

    &.full {
      border-color: $success_color;
      background-color: $success_color;

    }

    &.empty {
      background-color: transparent;
      border-color: transparentize($fg_color, 0.8);
    }
  }
}


/****************
 * Print dialog *
*****************/
window.dialog.print {
  drawing {
    color: $fg_color;
    background: none;
    border: none;
    padding: 0;

    paper {
      color: $fg_color;
      border: 1px solid $borders_color;
      background: white;
      padding: 0;
    }
  }

  .dialog-action-box { margin: 12px; }
}


/**********
 * Frames *
 **********/
frame,
.frame {
  box-shadow: none;
  margin: 0;
  padding: 0;
  border-radius: 0;
  border: 1px solid $borders_color;
}

frame {
  > label {
    margin: 4px;
  }
}

actionbar > revealer > box {
  padding: 6px;
  border-top: 1px solid $borders_color;

  &, > box.start, > box.end {
    border-spacing: 6px;
  }
}

scrolledwindow {
  // This is used when content is touch-dragged past boundaries.
  // draws a box on top of the content, the size changes programmatically.
  overshoot {
    &.top {
      @include overshoot(top);
    }

    &.bottom {
      @include overshoot(bottom);
    }

    &.left {
      @include overshoot(left);
    }

    &.right {
      @include overshoot(right);
    }
  }


  > junction { // the small square between two scrollbars
    border-color: transparent;
    // the border image is used to add the missing dot between the borders, details, details, details...
    border-image: linear-gradient(to bottom, $borders_color 1px, transparent 1px) 0 0 0 1 / 0 1px stretch;
    background-color: transparent;

    &:dir(rtl) { border-image-slice: 0 1 0 0; }
  }
}

//vbox and hbox separators
separator {
  min-height: 0;
  min-width: 0;
  border: 1px solid transparent;
  border-top-color: if($variant == 'light', transparentize(black, 0.92), transparentize(black, 0.75));
  border-bottom-color: if($variant == 'light', transparentize(white, 0.65), transparentize(white, 0.96));

  &.vertical {
    border-color: transparent;
    border-left-color: if($variant == 'light', transparentize(black, 0.92), transparentize(black, 0.75));
    border-right-color: if($variant == 'light', transparentize(white, 0.65), transparentize(white, 0.96));
  }
}


/*********
 * Lists *
 *********/
listview,
list {
  color: $text_color;
  background-color: $base_color;
  border-color: $borders_color;

  > row { padding: 2px; }
  > row.expander { padding: 0px; }
  > row.expander .row-header { padding: 2px; }

  &.horizontal row.separator,
  &.separators.horizontal > row:not(.separator) {
    border: 1px solid transparent;
    border-left-color: if($variant == 'light', transparentize(black, 0.92), transparentize(black, 0.75));
    border-right-color: if($variant == 'light', transparentize(white, 0.65), transparentize(white, 0.96));
  }
  &:not(.horizontal) row.separator,
  &.separators:not(.horizontal) > row:not(.separator) {
    border: 1px solid transparent;
    border-top-color: if($variant == 'light', transparentize(black, 0.92), transparentize(black, 0.75));
    border-bottom-color: if($variant == 'light', transparentize(white, 0.65), transparentize(white, 0.96));
  }
}

row {
  &.activatable {
    &.has-open-popup, // this is for indicathing which row generated a popover see https://bugzilla.gnome.org/show_bug.cgi?id=754411

    &:hover { background-color: if($variant == 'light', darken($base_color, 3%), transparentize($fg_color, 0.95)); }

    &:active { box-shadow: inset 0 2px 2px -2px transparentize(black, 0.8); }

    &:selected {
      &:active { box-shadow: inset 0 2px 3px -1px transparentize(black, 0.5); }

      &.has-open-popup,
      &:hover { background-color: mix($fg_color, $selected_bg_color, 10%); }
    }
  }

  &:selected { @extend %selected_items; }
}

columnview {
  // move padding to child cells
  > listview > row {
    padding: 0;

    // align horizontal sizing with header buttons
    > cell {
      padding: 8px 6px;

      &:not(:first-child) {
        border-left: 1px solid transparent;
      }
    }
  }

  // make column separators visible when :show-column-separators is true
  &.column-separators > listview > row > cell {
    border-left-color: $borders_color;
  }

  // shrink vertically for .data-table
  &.data-table > listview > row > cell {
    padding-top: 2px;
    padding-bottom: 2px;
  }
}

treeexpander {
  border-spacing: 4px;
}

/********************************************************
 * Data Tables                                          *
 * treeview like tables with individual focusable cells *
 * https://gitlab.gnome.org/GNOME/gtk/-/issues/2929     *
 ********************************************************/

columnview row:not(:selected) cell editablelabel:not(.editing):focus-within {
  outline: 2px solid $borders_color;
}

columnview row:not(:selected) cell editablelabel.editing:focus-within {
  outline: 2px solid $selected_bg_color;
}

columnview row:not(:selected) cell editablelabel.editing text selection {
  background-color: $selected_bg_color;
  color: transparent;
}

/*******************************************************
 * Rich Lists                                          *
 * Large list usually containing lots of widgets       *
 * https://gitlab.gnome.org/GNOME/gtk/-/issues/3073    *
 *******************************************************/


.rich-list { /* rich lists usually containing other widgets than just labels/text */
  & > row {
    padding: 8px 12px;
    min-height: 32px; /* should be tall even when only containing a label */

    & > box {
      border-spacing: 12px;
    }
  }
}

/*********************
 * App Notifications *
 *********************/
.app-notification {
  @extend %osd;

  padding: 10px;
  border-radius: 0 0 5px 5px;
  background-color: $osd_bg_color;
  background-image: linear-gradient(to bottom, transparentize(black, 0.8),
                                               transparent 2px);
  background-clip: padding-box;

  button { @extend %osd_button; }

  border { border: none; }
}

/*************
 * Expanders *
 *************/
expander {
  title > arrow {
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    &:hover { color: lighten($fg_color,30%); } //only lightens the arrow
    &:disabled { color: $insensitive_fg_color; }
    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
  }
}

expander-widget {
  > box > title {
    border-radius: 3px;

    &:hover > expander {
      color: lighten($fg_color, 30%); //only lightens the icon
    }
  }
}

.navigation-sidebar,
placessidebar,
stackswitcher,
expander-widget {
  &:not(decoration):not(window):drop(active):focus,
  &:not(decoration):not(window):drop(active) {
    box-shadow: none;
  }
}

/************
 * Calendar *
 ***********/
calendar {
  color: $text_color;
  border: 1px solid $borders_color;
  padding: 2px;
  font-feature-settings: "tnum";

  > header {
    border-bottom: 1px solid $borders_color;

    > button {
      @include button(undecorated);
    }
  }

  > grid {
    > label.day-name {
    }

    > label.week-number {
    }

    > label.today {
      box-shadow: inset 0px -2px $borders_color;

      &:selected {
        box-shadow: none;
      }
    }

    > label:focus {
      outline-color: $selected_bg_color;
      outline-offset: -2px;
      outline-width: 2px;
      outline-style: solid;
    }

    > label.day-number {
      padding: 4px;

      &:selected{
        @extend %selected_items;
        border-radius: 3px;
      }
    }

    > label.day-number.other-month {
      color: gtkalpha(currentColor, 0.3);
    }
  }
}


/***********
 * Dialogs *
 ***********/
window.dialog.message { // Message Dialog styling
  .titlebar {
    min-height: 20px;
    background-image: none;
    background-color: $bg_color;
    border-style: none;
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
  }

  box.dialog-vbox.vertical {
    border-spacing: 10px;
  }

  & label.title {
    font-weight: 800;
    font-size: 15pt;
  }

  &.csd { // rounded bottom border styling for csd version
     &.background {
      // bigger radius for better antialiasing
      border-bottom-left-radius: $window_radius+1;
      border-bottom-right-radius: $window_radius+1;
    }

    .dialog-action-area button {
      padding: 6px 16px; // labels are not vertically centered on message dialog, this is a workaround
      border-radius: 0;
      border-left-style: solid;
      border-right-style: none;
      border-bottom-style: none;

      &:first-child{
        border-left-style: none;
        border-bottom-left-radius: 7px;
      }

      &:last-child {
        border-bottom-right-radius: 7px;
      }
    }
  }
}

filechooser {
  .dialog-action-box {
    box-shadow: inset 0 1px $borders_color;
  }

  #pathbarbox {
    border-bottom: 1px solid $borders_color;
    background-color: $bg_color;
  }
}

filechooserbutton > button > box {
  border-spacing: 6px;
}

filechooserbutton:drop(active) {
  box-shadow: none;
  border-color: transparent;
}


/***********
 * Sidebar *
 ***********/
.sidebar {
  border-style: none;
  background-color: $base_color;

  &:not(separator) {
    @at-root %sidebar_left,
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) {
      border-right: 1px solid $borders_color;
      border-left-style: none;
    }

    @at-root %sidebar_right,
    &:dir(rtl),
    &.right {
      border-left: 1px solid $borders_color;
      border-right-style: none;
    }
  }

  listview.view,
  list { background-color: $base_color; }

  paned & { &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & { border-style: none; }}
}

stacksidebar {
  row {
    padding: 10px 4px;

    > label {
      padding-left: 6px;
      padding-right: 6px;
    }

    &.needs-attention > label {
      @extend %needs_attention;

      background-size: 6px 6px, 0 0;
    }
  }
}

separator.sidebar {
  background-color: $borders_color;
}

/**********************
 * Navigation Sidebar *
 **********************/

.navigation-sidebar {
  // padding: 2px 0; //only vertical padding. horizontal row size would clip

  > separator {
    margin: 2px;
  }

  > row {
    min-height: 30px;
    padding: 0 8px;
    border-radius: 0;
    margin: 0 0 2px;
    &:hover {
      background-color: darken($base_color, 5%);
    }

    &:selected {
      background-color: $selected_bg_color;
      color: $selected_fg_color;

      &:hover {
        background-color: darken($selected_bg_color, 5%);
      }

    }

    &:disabled { color: $insensitive_fg_color; }
  }
}

/****************
 * File chooser *
 ****************/
$_placesidebar_icons_opacity: 0.7;

row image.sidebar-icon { opacity: $_placesidebar_icons_opacity; } // dim the sidebar icons
                                                                  // see bug #786613 for details 
                                                                  // on this oddity

placessidebar {
  .navigation-sidebar > row {
    // Needs overriding of the GtkListBoxRow padding
    min-height: 30px;
    padding: 0px;

    // Using margins/padding directly in the SidebarRow
    // will make the animation of the new bookmark row jump
    > revealer { padding: 0 10px; }

    &:selected { color: $selected_fg_color; }

    &:disabled { color: $insensitive_fg_color; }

    image.sidebar-icon {
      &:dir(ltr) { padding-right: 8px; }
      &:dir(rtl) { padding-left: 8px; }
    }

    label.sidebar-label {
      &:dir(ltr) { padding-right: 2px; }
      &:dir(rtl) { padding-left: 2px; }
    }

    @at-root button.sidebar-button {
      @extend %button_basic_flat;

      @extend %button_selected_flat;

      min-height: 22px;
      min-width: 22px;
      margin-top: 2px;
      margin-bottom: 2px;
      padding: 0;
      border-radius: 100%;
    }

    // in the sidebar case it makes no sense to click the selected row
    &:selected:active { box-shadow: none; }

    &.sidebar-placeholder-row {
      padding: 0 8px;
      min-height: 2px;
      background-image: image($drop_target_color);
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row { color: $selected_bg_color; }

    &:drop(active):not(:disabled) {
      color: $drop_target_color;
      box-shadow: inset 0 1px $drop_target_color,
                  inset 0 -1px $drop_target_color;

      &:selected {
        color: $selected_fg_color;
        background-color: $drop_target_color;
      }
    }
  }
}

placesview {
  .server-list-button > image {
    -gtk-icon-transform: rotate(0turn);
  }

  .server-list-button:checked > image {
    -gtk-icon-transform: rotate(-0.5turn);
  }

  row.activatable:hover { background-color: transparent; }

  // this selects the "connect to server" label
  > actionbar > revealer > box > box {
    border-spacing: 6px;
  }
}


/*********
 * Paned *
 *********/
paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    -gtk-icon-source: none; // defeats the ugly default handle decoration
    border-style: none; // just to be sure
    background-color: transparent;
    // workaround, using background istead of a border since the border will get rendered twice (?)
    background-image: image($borders_color);
    background-size: 1px 1px;

    &:selected { background-image: image($selected_bg_color); } // FIXME is this needed?

    &.wide {
      min-width: 5px;
      min-height: 5px;
      background-color: transparent;
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;
    background-position: center;
    margin: 0 -3px 0 -3px;
    padding: 0 3px 0 3px;

    &.wide {
      background-repeat: no-repeat;
      background-size: 2px 24px;
      background-image: -gtk-scaled(url("assets/pane-separator-grip-vertical.png"), url("assets/pane-separator-grip-vertical@2.png"));
    }
  }

  &.vertical > separator {
    margin: -3px 0 -3px 0;
    padding: 3px 0 3px 0;
    background-repeat: repeat-x;
    background-position: center;

    &.wide {
      background-repeat: no-repeat;
      background-size: 24px 2px;
      background-image: -gtk-scaled(url("assets/pane-separator-grip.png"), url("assets/pane-separator-grip@2.png"));
    }
  }
}

/**************
 * GtkVideo *
 **************/

video {
  & image.osd {
    min-width: 64px;
    min-height: 64px;
    border-radius: 32px;
  }
  background: black;
}

/************
 * Tooltips *
 ************/
tooltip {
  &.background {
    // background-color needs to be set this way otherwise it gets drawn twice
    // see https://bugzilla.gnome.org/show_bug.cgi?id=736155 for details.
    background-color: $tooltip_bg_color;
    background-clip: padding-box;
    border: 1px solid $borders_color;
  }

  padding: 4px;
  border-radius: 4px;
  box-shadow: none; // otherwise it gets inherited by windowframe.csd
  text-shadow: none;

  > box {
    border-spacing: 6px;
  }
}


/*****************
 * Color Chooser *
 *****************/
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  &:drop(active), & { border-style: none; } // FIXME: implement a proper drop(active) state

  $_colorswatch_radius: 5px;

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-top-right-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-top-right-radius: $_colorswatch_radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-bottom-left-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-bottom-left-radius: $_colorswatch_radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-top-right-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.dark {
    > overlay {
      color: white;

      &.activatable:hover > overlay { border-color: if($variant == 'light', transparentize(black, 0.2), $borders_color); }
    }
  }

  &.light {
    > overlay {
      color: black;

      &.activatable:hover > overlay { border-color: if($variant == 'light', transparentize(black, 0.5), $borders_color); }
    }
  }

  &:drop(active) {
    box-shadow: none;

    &.light > overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px if($variant == 'light', darken($drop_target_color, 7%), $borders_color),
                  inset 0 0 0 1px $drop_target_color;
    }

    &.dark > overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px if($variant == 'light', transparentize(black, 0.7), $borders_color),
                  inset 0 0 0 1px $drop_target_color;
    }
  }

  > overlay {
    border: 1px solid if($variant == 'light', transparentize(black, 0.7), $borders_color);

    &.activatable:hover > overaly {
      box-shadow: inset 0 1px transparentize(white, 0.6),
                  inset 0 -1px transparentize(black, 0.8);
    }
  }

  &#add-color-button {
    border-radius: $_colorswatch_radius $_colorswatch_radius 0 0;

    &:only-child { border-radius: $_colorswatch_radius; }

    > overlay {
      @include button(normal);

      &.activatable:hover > overlay { @include button(hover); }
    }
  }

  &:disabled {
    opacity: 0.5;

    > overlay {
      border-color: transparentize(black, 0.4);
      box-shadow: none;
    }
  }

  row:selected & { box-shadow: 0 0 0 2px $selected_fg_color; }

  &#editor-color-sample {
    border-radius: 4px;

    > overlay { border-radius: 4.5px; }
  }
}

// colorscale popup
colorchooser .popover.osd { border-radius: 5px; }

/********
 * Misc *
 ********/
.content-view {
  background-color: $base_color;

  &:hover { -gtk-icon-filter: brightness(1.2); }

  .tile {
    margin: 2px;
    background-color: if($variant=='light', transparent, black);
    border-radius: 0;
    padding: 0;

    &:active, &:selected { background-color: if($variant=='light', transparent, $selected_bg_color); }
    &:disabled { background-color: if($variant=='light', transparent, $insensitive_bg_color); }
  }

  > rubberband { @extend rubberband; }
}

.scale-popup {
  .osd & { @extend %osd; }

  .osd & button.flat {  //FIXME: quick hack, redo properly
    border-style: none;
    border-radius: 5px;
  }

  button { // +/- buttons on GtkVolumeButton popup
    &:hover {
      @extend %undecorated_button;
      background-color: transparentize($fg_color,0.9);
      border-radius: 5px;
    }
  }
}


/**********************
 * Window Decorations *
 *********************/
window {
  // lamefun trick to get rounded borders regardless of CSD use
  border-width: 0px;

  // this needs to be transparent
  // see bug #722563
  $_wm_border: if($variant=='light', transparentize(black, 0.77), transparentize(black, 0.25));
  $_wm_border_backdrop: if($variant=='light', transparentize(black, 0.82), transparentize(black, 0.25));

  &.csd {
    box-shadow: 0 3px 9px 1px transparentize(black, 0.5),
              0 0 0 1px $_wm_border; //doing borders with box-shadow
    margin: 0px;
    border-radius: $window_radius $window_radius 0 0;
    &:backdrop {
    // the transparent shadow here is to enforce that the shadow extents don't
    // change when we go to backdrop, to prevent jumping windows.
    // The biggest shadow should be in the same order then in the active state
    // or the jumping will happen during the transition.
    box-shadow: 0 3px 9px 1px transparent,
                0 2px 6px 2px transparentize(black, 0.8),
                0 0 0 1px $_wm_border_backdrop;
    }

    &.popup {
      box-shadow: 0 1px 2px transparentize(black, 0.8),
                  0 0 0 1px transparentize($_wm_border, 0.1);
    }

    &.dialog.message {
      border-radius: $window_radius;
      box-shadow: 0 1px 2px transparentize(black, 0.8),
                  0 0 0 1px transparentize($_wm_border, 0.1);
    }
  }

  .solid-csd & {
    margin: 0;
    padding: 4px;
    border: solid 1px $borders_color;
    border-radius: 0;
    box-shadow: inset 0 0 0 3px $headerbar_color, inset 0 1px $top_hilight;

    &:backdrop { box-shadow: inset 0 0 0 3px $backdrop_bg_color, inset 0 1px $top_hilight; }
  }

  &.maximized,
  &.fullscreen { border-radius: 0; box-shadow: none; }

  &.tiled,
  &.tiled-top,
  &.tiled-right,
  &.tiled-bottom,
  &.tiled-left {
    border-radius: 0;
    box-shadow: 0 0 0 1px $_wm_border,
                0 0 0 20px transparent; //transparent control workaround -- #3670

    &:backdrop { box-shadow: 0 0 0 1px $_wm_border_backdrop,
                             0 0 0 20px transparent; // #3670
    }
  }

  .popup & { box-shadow: none; }

  // server-side decorations as used by mutter
  // just doing borders, wm draws actual shadows
  .ssd & { box-shadow: 0 0 0 1px $_wm_border; }
  .ssd &:backdrop { box-shadow: 0 0 0 1px $_wm_border_backdrop; }

  tooltip.csd {
    border-radius: 5px;
    box-shadow: none;
  }
}

// catch all extend :)

%selected_items {
  background-color: $selected_bg_color;

  @at-root %nobg_selected_items, & {
    color: $selected_fg_color;

    @at-root %selected_items_disabled,
    &:disabled { color: mix($selected_fg_color, $selected_bg_color, 50%); }
  }
}

.monospace { font-family: monospace; }


/**********************
 * Touch Copy & Paste *
 *********************/
//touch selection handlebars for the Popover.osd above
cursor-handle {
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  border-style: none;

  @each $s,$as in ('',''),
                  (':hover','-hover'),
                  (':active','-active') { //no need for insensitive and backdrop
    &.top#{$s}:dir(ltr), &.bottom#{$s}:dir(rtl) {
      $_url: 'assets/text-select-start#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
      padding-left: 10px;
    }

    &.bottom#{$s}:dir(ltr), &.top#{$s}:dir(rtl) {
      $_url: 'assets/text-select-end#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
      padding-right: 10px;
    }

    &.insertion-cursor#{$s}:dir(ltr), &.insertion-cursor#{$s}:dir(rtl) {
      $_url: 'assets/slider-horz-scale-has-marks-above#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
    }
  }
}

shortcuts-section {
  margin: 20px;
}

.shortcuts-search-results {
  margin: 20px;
  border-spacing: 24px;
}

// shortcut window keys
shortcut {
  border-spacing: 6px;
}

// shortcut window keys
shortcut > .keycap {
  min-width: 16px;
  min-height: 20px;
  margin-top: 2px;
  padding-bottom: 3px;
  padding-left: 6px;
  padding-right: 6px;

  color: $fg_color;
  background-color: $base_color;
  border: 1px solid;
  border-color: if($variant == 'light', mix($borders_color, $bg_color, 50%), $borders_color);
  border-radius: 3px;
  box-shadow: if($variant == 'light', inset 0 -3px mix($base_color, $bg_color, 20%), inset 0 -3px mix($borders_color, $base_color, 60%));
  font-size: smaller;
}

:not(decoration):not(window):drop(active):focus,
:not(decoration):not(window):drop(active) { // FIXME needs to be done widget by widget, this wildcard should really die
  border-color: $drop_target_color;
  box-shadow: inset 0 0 0 1px $drop_target_color;
  caret-color: $drop_target_color;
}

stackswitcher.circular {
  border-spacing: 12px;

  // FIXME aggregate with buttons
  > button.circular,
  > button.text-button.circular {
    min-width: 32px;
    min-height: 32px;
    padding: 0;
  }
}

/*************
 * App Icons *
 *************/
/* Outline for low res icons */
.lowres-icon {
    -gtk-icon-shadow: 0 -1px rgba(0,0,0,0.05),
      1px 0 rgba(0,0,0,0.1),
      0 1px rgba(0,0,0,0.3),
      -1px 0 rgba(0,0,0,0.1);
}

/* Dropshadow for large icons */
.icon-dropshadow {
  -gtk-icon-shadow: 0 1px 12px rgba(0,0,0,0.05),
      0 -1px rgba(0,0,0,0.05),
      1px 0 rgba(0,0,0,0.1),
      0 1px rgba(0,0,0,0.3),
      -1px 0 rgba(0,0,0,0.1);
}

/*********
 * Emoji *
 ********/

popover.emoji-picker > contents {
  padding-left: 0;
  padding-right: 0;
}

.emoji-searchbar {
  padding: 6px;
  border-spacing: 6px;
  border-bottom: 1px solid $borders_color;
}

button.emoji-section {
  border-color: transparent;
  border-width: 3px;
  border-style: none none solid;
  border-radius: 0;

  padding: 3px 0 0;
  min-width: 32px;
  min-height: 28px;

  /* reset props inherited from the button style */
  background: none;
  box-shadow: none;
  text-shadow: none;

  &:hover { border-color: if($variant == 'light', $borders_color, transparentize($fg_color, .9)); }
  &:checked { border-color: $selected_bg_color; }
}

popover.emoji-picker emoji {
  font-size: x-large;
  padding: 6px;
  border-radius: 6px;

  &:focus,
  &:hover {
    background: $selected_bg_color;
  }
}

emoji-completion-row > box {
  border-spacing: 10px;
  padding: 2px 10px;
}

emoji-completion-row:focus,
emoji-completion-row:hover {
  background-color: $selected_bg_color;
  color: $selected_fg_color;
}

emoji-completion-row emoji:focus,
emoji-completion-row emoji:hover {
  background-color: $selected_bg_color;
}

popover.entry-completion > contents {
  padding: 0;
}

statusbar {
  padding: 6px 10px 6px 10px;
}

menubutton {
  > button > box {
    border-spacing: 6px;
  }

  arrow {
    min-height: 16px;
    min-width: 16px;
    &.none {
      -gtk-icon-source: -gtk-icontheme('open-menu-symbolic');
    }
    &.down {
      -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    }
    &.up {
      -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
    }
    &.left {
      -gtk-icon-source: -gtk-icontheme('pan-start-symbolic');
    }
    &.right {
      -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
    }
  }
}
